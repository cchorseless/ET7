//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.Conf.Achievement
{
public sealed partial class AchievementConfigRecord :  Bright.Config.BeanBase 
{
    public AchievementConfigRecord(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Index = _buf.ReadInt();
        NextId = _buf.ReadInt();
        AchievementName = _buf.ReadString();
        AchievementDes = _buf.ReadString();
        AchievementType = _buf.ReadString();
        AchievementFinishType = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AchieveFinishCondition = new System.Collections.Generic.List<Task.TaskFinishConditionBean>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Task.TaskFinishConditionBean _e0;  _e0 = Task.TaskFinishConditionBean.DeserializeTaskFinishConditionBean(_buf); AchieveFinishCondition.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AchievePrize = new System.Collections.Generic.List<Item.ItemInfoBean>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Item.ItemInfoBean _e0;  _e0 = Item.ItemInfoBean.DeserializeItemInfoBean(_buf); AchievePrize.Add(_e0);}}
        PostInit();
    }

    public static AchievementConfigRecord DeserializeAchievementConfigRecord(ByteBuf _buf)
    {
        return new Achievement.AchievementConfigRecord(_buf);
    }

    /// <summary>
    /// 成就id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 组内索引
    /// </summary>
    public int Index { get; private set; }
    /// <summary>
    /// 组内下一个成就id
    /// </summary>
    public int NextId { get; private set; }
    /// <summary>
    /// 成就名称
    /// </summary>
    public string AchievementName { get; private set; }
    /// <summary>
    /// 成就描述
    /// </summary>
    public string AchievementDes { get; private set; }
    /// <summary>
    /// 成就类型
    /// </summary>
    public string AchievementType { get; private set; }
    /// <summary>
    /// 成就完成类型
    /// </summary>
    public string AchievementFinishType { get; private set; }
    public System.Collections.Generic.List<Task.TaskFinishConditionBean> AchieveFinishCondition { get; private set; }
    public System.Collections.Generic.List<Item.ItemInfoBean> AchievePrize { get; private set; }

    public const int __ID__ = -133843709;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in AchieveFinishCondition) { _e?.Resolve(_tables); }
        foreach(var _e in AchievePrize) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in AchieveFinishCondition) { _e?.TranslateText(translator); }
        foreach(var _e in AchievePrize) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Index:" + Index + ","
        + "NextId:" + NextId + ","
        + "AchievementName:" + AchievementName + ","
        + "AchievementDes:" + AchievementDes + ","
        + "AchievementType:" + AchievementType + ","
        + "AchievementFinishType:" + AchievementFinishType + ","
        + "AchieveFinishCondition:" + Bright.Common.StringUtil.CollectionToString(AchieveFinishCondition) + ","
        + "AchievePrize:" + Bright.Common.StringUtil.CollectionToString(AchievePrize) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}