//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET.Conf.Dota
{
public sealed partial class RoundEnemyPoolConfigRecord :  Bright.Config.BeanBase 
{
    public RoundEnemyPoolConfigRecord(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Playername = _buf.ReadString();
        Accountid = _buf.ReadString();
        Population = _buf.ReadInt();
        RoundMin = _buf.ReadInt();
        RoundMax = _buf.ReadInt();
        Battlescore = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Sectinfo = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Sectinfo.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Enemyinfo = new System.Collections.Generic.List<Dota.RoundDrawEnemyConfigBean>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Dota.RoundDrawEnemyConfigBean _e0;  _e0 = Dota.RoundDrawEnemyConfigBean.DeserializeRoundDrawEnemyConfigBean(_buf); Enemyinfo.Add(_e0);}}
        PostInit();
    }

    public static RoundEnemyPoolConfigRecord DeserializeRoundEnemyPoolConfigRecord(ByteBuf _buf)
    {
        return new Dota.RoundEnemyPoolConfigRecord(_buf);
    }

    /// <summary>
    /// 阵容编号
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 玩家名称
    /// </summary>
    public string Playername { get; private set; }
    /// <summary>
    /// accountid
    /// </summary>
    public string Accountid { get; private set; }
    /// <summary>
    /// 人口数
    /// </summary>
    public int Population { get; private set; }
    /// <summary>
    /// 匹配最小回合
    /// </summary>
    public int RoundMin { get; private set; }
    /// <summary>
    /// 匹配最大回合
    /// </summary>
    public int RoundMax { get; private set; }
    /// <summary>
    /// 战力
    /// </summary>
    public int Battlescore { get; private set; }
    /// <summary>
    /// 羁绊详情
    /// </summary>
    public System.Collections.Generic.List<string> Sectinfo { get; private set; }
    public System.Collections.Generic.List<Dota.RoundDrawEnemyConfigBean> Enemyinfo { get; private set; }

    public const int __ID__ = -1741825377;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Enemyinfo) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Enemyinfo) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Playername:" + Playername + ","
        + "Accountid:" + Accountid + ","
        + "Population:" + Population + ","
        + "RoundMin:" + RoundMin + ","
        + "RoundMax:" + RoundMax + ","
        + "Battlescore:" + Battlescore + ","
        + "Sectinfo:" + Bright.Common.StringUtil.CollectionToString(Sectinfo) + ","
        + "Enemyinfo:" + Bright.Common.StringUtil.CollectionToString(Enemyinfo) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}